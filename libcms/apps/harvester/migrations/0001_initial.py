# Generated by Django 3.0.5 on 2020-04-13 17:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import harvester.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FullTextCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri_hash', models.CharField(db_index=True, max_length=32, unique=True)),
                ('uri', models.TextField(max_length=2048)),
                ('content', models.TextField(max_length=10485760)),
                ('error', models.BooleanField(default=False, verbose_name='Ошибка при получении')),
                ('message', models.TextField(max_length=1048576)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Кеш полного текста',
                'verbose_name_plural': 'Кеш полного текста',
            },
        ),
        migrations.CreateModel(
            name='HarvestingRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, verbose_name='Активен')),
                ('reset', models.BooleanField(default=False, help_text='При сборе удаляет записи, которые не были в файлах источника', verbose_name='Очистка')),
                ('index_after_harvesting', models.BooleanField(default=False, help_text='Запустить процесс индексирования используя все правила индексирования', verbose_name='Индексировать после сбора')),
                ('scheduled', models.BooleanField(default=False, verbose_name='Сбор по расписанию')),
                ('cron_rule', models.CharField(blank=True, help_text='Пример: 0 8 * * *. Минимальный период - 1 минута', max_length=128, validators=[harvester.validators.CronValidator('Введите корректное значение расписания')], verbose_name='Расписание в формате cron')),
                ('last_harvested', models.DateTimeField(blank=True, null=True, verbose_name='Время последнего сбора')),
                ('error', models.BooleanField(default=False, verbose_name='Ошибка при сборе')),
                ('message', models.TextField(blank=True, max_length=2048, verbose_name='Сообщение')),
            ],
            options={
                'verbose_name': 'Правило сбора',
                'verbose_name_plural': 'Привила сбора',
            },
        ),
        migrations.CreateModel(
            name='IndexTransformationRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                ('schema', models.CharField(choices=[('RUSMARC', 'RUSMARC')], default='RUSMARC', max_length=32, verbose_name='Для схемы')),
                ('content', models.TextField(default='\n"""\nindex_document - индексный документ\nrq - junimarc.MarcQuery записи\njrecord - junimarc.Record\nrecord - запись харвестра\nrecord_content - контент записи харвестра\nget_full_text(uri) - загрузка и извленение полного текста из pdf документа. Результат кешируется\nurls = {} - словарь с URL документов\n"""\n\n\nFULL_TEXT_URL = \'http://localhost\'\nGROUP_FIELDS_CACHE = {}\nEACH_FIELD_QUERY_CACHE = {}\n\n\ndef _get_group_fields(prefix=\'\'):\n    value = GROUP_FIELDS_CACHE.get(prefix)\n\n    if value is not None:\n        return value\n\n    group_fields = []\n    GROUP_FIELDS_CACHE[prefix] = group_fields;\n\n    for field in jrecord.get_fields():\n        tag = field.get_tag()\n        if tag.startswith(prefix):\n            group_fields.append(tag)\n\n    return group_fields;\n\n\ndef _get_each_filed_query(rq, prefix):\n    value = EACH_FIELD_QUERY_CACHE.get(prefix)\n\n    if value is not None:\n        return value\n\n    group_field_queries = []\n    EACH_FIELD_QUERY_CACHE[prefix] = group_field_queries\n\n    for tag in _get_group_fields(prefix):\n        for fq in rq.get_field(tag).list():\n            group_field_queries.append(fq)\n\n    return group_field_queries\n\ndef _add_to_non_empty_values(values, data):\n    if data and len(values) > 0:\n        values.append(data)\n\n\ndef _add_to_values(values, data):\n    if data:\n        if type(data) in [list, set]:\n            values.extend(data)\n        else:\n            values.append(data)\n    return values\n\n\ndef _get_each_subfield_data(sfq):\n    values = []\n    for sf in sfq.list():\n        _add_to_values(values, sf.get_gata())\n    return \' \'.join(values)\n\n\ndef _get_each_subfield_data(sfq):\n    values = [];\n    for sf in sfq.list():\n        _add_to_values(values, sf.get_data())\n    return \' \'.join(values)\n\n\ndef _extract_700_field(fq):\n    values = []\n    _add_to_values(values, fq.get_subfield(\'a\').get_data());\n    _add_to_values(values, fq.get_subfield(\'b\').get_data());\n    _add_to_values(values, _get_each_subfield_data(fq.get_subfield(\'c\')));\n    _add_to_values(values, fq.get_subfield(\'d\').get_data());\n    _add_to_values(values, fq.get_subfield(\'g\').get_data());\n    _add_to_values(values, _get_each_subfield_data(fq.get_subfield(\'o\')));\n    return \' \'.join(values);\n\n\ndef annotation(rq):\n    values = []\n    for fq in rq.get_field(\'330\').list():\n        _add_to_values(values, fq.get_subfield(\'a\').get_data())\n    return values\n\n\ndef author(rq):\n    values = []\n    for fq in rq.get_field(\'700\').list():\n        _add_to_values(values, _extract_700_field(fq))\n\n    for fq in rq.get_field(\'701\').list():\n        _add_to_values(values, _extract_700_field(fq))\n\n    for fq in rq.get_field(\'702\').list():\n        _add_to_values(values, _extract_700_field(fq))\n\n    for fq in rq.get_field(\'703\').list():\n        _add_to_values(values, _extract_700_field(fq))\n\n    return values;\n\n\ndef author_name_corporate(rq):\n    fq_list = [\n        rq.get_field(\'710\'),\n        rq.get_field(\'711\'),\n        rq.get_field(\'712\'),\n        rq.get_field(\'713\'),\n    ]\n    values = []\n\n    for fq_item in fq_list:\n        for fq in fq_item.list():\n            for sf in fq.get_subfields().list():\n                _add_to_values(values, sf.get_data())\n\n    return values\n\ndef bbk(rq):\n    values = []\n    for fq in rq.get_field(\'689\').list():\n        _add_to_values(values, fq.get_subfield(\'a\').get_data())\n\n    for fq in rq.get_field(\'686\').list():\n        sfa = fq.get_subfield(\'a\').get_data()\n        sf2 = fq.get_subfield(\'2\').get_data()\n        if sf2 == \'rubbk\':\n            _add_to_values(values, sfa)\n    return values\n\n\ndef bib_level(rq):\n    return rq.leader_data()[7:8] or \'\';\n\n\ndef code_language(rq):\n    values = [];\n    for fq in rq.get_field(\'101\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data());\n    return values;\n\ndef content_text(eq):\n    values = []\n    # return []\n    full_text_prefix = FULL_TEXT_URL\n    for fq in rq.get_field(\'856\').list():\n        sfy_data = fq.get_subfield(\'y\').get_data()\n        sfz_data = fq.get_subfield(\'z\').get_data()\n        if sfz_data == \'Содержание\' and sfy_data.startswith(\'/text\'):\n            content = get_full_text(full_text_prefix + sfy_data)\n            _add_to_values(values, content)\n    return values\n\ndef content_type(rq):\n    values = [];\n    sfa = rq.get_field(\'105\').get_subfield(\'a\').get_data()\n    positions = [4, 5, 6, 7];\n    for i in positions:\n        data = (sfa[i:i+1] or \'\').strip()\n        if data == \'|\':\n            continue\n        _add_to_values(values, data)\n    return values\n\n\ndef content_notes(rq):\n    values = []\n    for fq in rq.get_field(\'327\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data());\n    return values;\n\n\ndef date_of_publication(rq):\n    f210d = rq.get_field(\'210\').get_subfield(\'d\').get_data()\n    f461210d = rq.get_field(\'461\').get_field(\'210\').get_subfield(\'d\').get_data()\n    f463210d = rq.get_field(\'463\').get_field(\'210\').get_subfield(\'d\').get_data()\n\n    values = []\n    _add_to_values(values, f210d)\n    _add_to_values(values, f461210d)\n    _add_to_values(values, f463210d)\n\n    return values[0:1] or \'\'\n\ndef date_of_publication_of_original(rq):\n    values = []\n    for fq in _get_each_filed_query(rq, \'455\'):\n        _add_to_values(values, fq.get_field(\'210\').get_subfield(\'d\').get_data())\n    return values\n\ndef document_type(rq):\n    leader06 = rq.leader_data()[6:7]\n    leader07 = rq.leader_data()[7:8]\n    leader08 = rq.leader_data()[8:9]\n    f105_a = rq.get_field(\'105\').get_subfield(\'a\').get_data()\n    f105_a_4_7 = f105_a[4:8]\n    f110_a = rq.get_field(\'105\').get_subfield(\'a\').get_data()\n    f110_a_pos_0 = f110_a[0:1]\n    f115_a = rq.get_field(\'115\').get_subfield(\'a\').get_data()\n    f115_a_pos_0 = f115_a[0:1]\n    f116_a = rq.get_field(\'116\').get_subfield(\'a\').get_data()\n    f116_a_pos_0 = f116_a[0:1]\n\n    values = []\n\n    if \'e\' in f105_a_4_7:\n        values.append(\'dict\')\n    \n    elif \'f\' in f105_a_4_7:\n        values.append(\'encyc\')\n\n    elif \'g\' in f105_a_4_7:\n        values.append(\'ref\')\n\n    elif \'j\' in f105_a_4_7:\n        values.append(\'textbook\')\n\n    elif \'p\' in f105_a_4_7:\n        values.append(\'tech_report\')\n\n    elif \'d\' in f105_a_4_7 and \'m\' in f105_a_4_7:\n        values.append(\'author_abstract\')\n\n    elif \'m\' in f105_a_4_7:\n        values.append(\'disser\')\n        \n    elif leader06 == \'k\' and leader07 == \'m\' and f116_a_pos_0 == \'b\':\n        values.append(\'picture\')\n    return values\n\n\ndef grnti(rq):\n    values = []\n    for fq in rq.get_field(\'689\').list():\n        _add_to_values(values, fq.get_subfield(\'a\').get_data())\n\n    for fq in rq.get_field(\'686\').list():\n        sfa = fq.get_subfield(\'a\').get_data();\n        sf2 = fq.get_subfield(\'2\').get_data();\n        if sf2 == \'rugasnti\':\n            _add_to_values(values, sfa);\n    return values;\n\n\ndef isbn(rq):\n    values = []\n    _add_to_values(values, rq.get_field(\'010\').get_subfield(\'a\').get_data())\n    for tag in _get_group_fields():\n        _add_to_values(values, rq.get_field(tag).get_field(\'010\').get_subfield(\'a\').get_data())\n    return values\n\n\ndef issn(rq):\n    values = []\n    _add_to_values(values, rq.get_field(\'011\').get_subfield(\'a\').get_data())\n    _add_to_values(values, rq.get_field(\'225\').get_subfield(\'x\').get_data())\n    for fq in _get_each_filed_query(rq, \'4\'):\n        _add_to_values(values, fq.get_field(\'011\').get_subfield(\'a\').get_data())\n    return values\n\n\ndef full_text(rq):\n    values = []\n    # return []\n    full_text_prefix = FULL_TEXT_URL\n    \n    for fq in rq.get_field(\'856\').list():\n        sfy_data = fq.get_subfield(\'y\').get_data()\n        sfz_data = fq.get_subfield(\'z\').get_data()\n        if sfz_data == \'Полный текст\' and sfy_data.startswith(\'/text\'):\n            content = get_full_text(full_text_prefix + sfy_data)\n            _add_to_values(values, content)\n    return values\n\n\ndef local_number(rq):\n    return rq.get_field(\'001\').get_data();\n\n\ndef notes(rq):\n    values = []\n    for fq in rq.get_field(\'330\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data())\n    return values\n\n\ndef material_type(rq):\n    leader6 = rq.leader_data()[6:7]\n    leader7 = rq.leader_data()[7:8]\n    leader8 = rq.leader_data()[8:9]\n    f105_a = rq.get_field(\'105\').get_subfield(\'a\').get_data() or \' \' * 9\n    f105_a_pos_4 = f105_a[4:5]\n    f105_a_pos_5 = f105_a[5:6]\n    f105_a_pos_6 = f105_a[6:7]\n    f105_a_pos_7 = f105_a[7:8]\n    f105_a_pos_4_7 = [f105_a_pos_4, f105_a_pos_5, f105_a_pos_6, f105_a_pos_7]\n\n    values = []\n\n    if leader7 == \'m\' and leader8 == \'0\':\n        _add_to_values(values, \'monography\')\n\n    if leader7 == \'s\' and leader8 == \'1\':\n        _add_to_values(values, \'journal_paper\')\n\n    if leader6 == \'a\' and leader7 == \'m\' and leader8 == \'2\':\n        _add_to_values(values, \'issues\')\n\n    if leader7 == \'a\' or leader7 == \'b\':\n        _add_to_values(values, \'articles_reports\')\n\n    if leader7 == \'c\':\n        _add_to_values(values, \'collections\')\n\n    if leader7 == \'i\':\n        _add_to_values(values, \'integrity\')\n\n    if leader6 == \'c\' or leader6 == \'d\':\n        _add_to_values(values, \'musical_scores\')\n\n    if leader6 == \'e\' or leader6 == \'f\':\n        _add_to_values(values, \'maps\')\n\n    if leader6 == \'g\':\n        _add_to_values(values, \'video\')\n\n    if leader6 == \'i\' or leader6 == \'j\':\n        _add_to_values(values, \'sound_records\')\n\n    if leader6 == \'k\':\n        _add_to_values(values, \'graphics\')\n\n    if ((rq.get_field(\'106\').is_exist() or rq.get_field(\'135\').is_exist())\n            and (rq.get_field(\'856\').get_subfield(\'u\').is_exist()\n                 or rq.get_field(\'330\').get_subfield(\'u\').is_exist())\n    ):\n        _add_to_values(values, \'e_resources\')\n\n    if \'m\' in f105_a_pos_4_7:\n        _add_to_values(values, \'dissertation_abstracts\')\n\n    if \'d\' in f105_a_pos_4_7:\n        _add_to_values(values, \'referats\')\n\n    if \'j\' in f105_a_pos_4_7:\n        _add_to_values(values, \'textbook\')\n\n    if leader7 == \'m\' and \'k\' in f105_a_pos_4_7:\n        _add_to_values(values, \'patents\')\n\n    if leader7 == \'m\' and \'l\' in f105_a_pos_4_7:\n        _add_to_values(values, \'standarts\')\n\n    if leader7 == \'s\' and \'l\' in f105_a_pos_4_7:\n        _add_to_values(values, \'legislative_acts\')\n\n    if leader7 == \'m\' and \'p\' in f105_a_pos_4_7:\n        _add_to_values(values, \'technical_reports\')\n\n    if \'g\' in f105_a_pos_4_7:\n        _add_to_values(values, \'references\')\n\n    if \'e\' in f105_a_pos_4_7:\n        _add_to_values(values, \'dictionaries\')\n\n    if \'f\' in f105_a_pos_4_7:\n        _add_to_values(values, \'encyclopedias\')\n\n    return values\n\ndef owner(rq):\n    values = []\n    if record.source.code in [\'ekbson\', \'gpntb\']:\n        return values\n    \n    for fq in rq.get_field(\'850\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data())\n    return values\n\n\ndef parent_record_number(rq):\n    values = []\n    for fq in _get_each_filed_query(rq, \'4\'):\n        _add_to_values(values, fq.get_field(\'001\').get_data())\n    return values\n\n\ndef place_publication(rq):\n    values = []\n    for fq in rq.get_field(\'210\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data())\n\n    for fq in rq.get_field(\'620\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data())\n\n        for sfq in fq.get_subfield(\'b\').list():\n            _add_to_values(values, sfq.get_data())\n\n        for sfq in fq.get_subfield(\'c\').list():\n            _add_to_values(values, sfq.get_data())\n\n        for sfq in fq.get_subfield(\'d\').list():\n            _add_to_values(values, sfq.get_data())\n\n    return values\n\n\ndef previose_local_number(rq):\n    values = []\n    for fq in rq.get_field(\'035\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data())\n    return values\n\n\ndef publisher(rq):\n    values = []\n    for fq in rq.get_field(\'210\').list():\n        for sfq in fq.get_subfield(\'c\').list():\n            _add_to_values(values, sfq.get_data())\n    \n    for fq in _get_each_filed_query(rq, \'4\'):\n         for ifq in fq.get_field(\'210\').list():\n            _add_to_values(values, ifq.get_subfield(\'c\').get_data())\n    return values\n\n\ndef record_type(rq):\n    return rq.leader_data()[6:7] or \'\';\n\n\ndef subject_heading(rq):\n    values = []\n    for fq in rq.get_field(\'606\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data())\n\n    for fq in _get_each_filed_query(rq, \'4\'):\n        for inner_fq in fq.get_field(\'606\').list():\n            _add_to_values(values, inner_fq.get_subfield(\'a\').get_data())\n\n    return values;\n\n\ndef subject_keywords(rq):\n    values = []\n    for fq in rq.get_field(\'610\').list():\n        for sfq in fq.get_subfield(\'a\').list():\n            _add_to_values(values, sfq.get_data())\n\n    for fq in _get_each_filed_query(rq, \'4\'):\n        for inner_fq in fq.get_field(\'610\').list():\n            _add_to_values(values, inner_fq.get_subfield(\'a\').get_data())\n\n    return values;\n\n\ndef subject_subheading(rq):\n    values = []\n    for fq in rq.get_field(\'606\').list():\n        for sfq in fq.get_subfield(\'x\').list():\n            _add_to_values(values, sfq.get_data())\n\n    for fq in _get_each_filed_query(rq, \'4\'):\n        for inner_fq in fq.get_field(\'606\').list():\n            _add_to_values(values, inner_fq.get_subfield(\'x\').get_data())\n\n    return values;\n\n\ndef _extract_200_title(fq):\n    values = []\n    for sfq in fq.get_subfield(\'a\').list():\n        _add_to_non_empty_values(values, \'; \');\n        _add_to_values(values, sfq.get_data().strip())\n\n    #title_part = fq.get_subfield(\'b\').get_data().strip();\n    #if title_part:\n    #    values.append((\' [\' + title_part + \']\')\n\n    title_part = fq.get_subfield(\'e\').get_data().strip();\n    if title_part:\n        values.append(\': \' + title_part)\n\n    #title_part = fq.get_subfield(\'f\').get_data().strip();\n    #if title_part:\n    #    values.append(\' / \' + title_part)\n\n    title_part = fq.get_subfield(\'g\').get_data().strip();\n    if title_part:\n        values.append(\'; \' + title_part)\n\n    title_part = fq.get_subfield(\'v\').get_data().strip();\n    if title_part:\n        values.append(\'. \' + title_part)\n\n\n    if len(values) == 0:\n        return \'\'\n\n    return \'\'.join(values).strip()\n\n\ndef title(rq):\n    title = []\n    _add_to_values(title, _extract_200_title(rq.get_field(\'200\')))\n    #// var title461 = _extract200Title(rq.getField(\'461\').getInnerField(\'200\'));\n    #// var title463 = _extract200Title(rq.getField(\'463\').getInnerField(\'200\'));\n    #// if (title463) {\n    #//     addToValues(title, title200);\n    #//     addToNonEmptyValues(title, \' // \');\n    #//     addToValues(title, title461);\n    #//     addToNonEmptyValues(title, \'. – \');\n    #//     addToValues(title, title463);\n    #// } else if (title461) {\n    #//     addToValues(title, title461);\n    #//     addToNonEmptyValues(title, \'. – \');\n    #//     addToValues(title, title200);\n    #// } else {\n    #//     addToValues(title, title200);\n    #// }\n\n    for fq in _get_each_filed_query(rq, \'4\'):\n        _add_to_values(title, _extract_200_title(fq.get_field(\'200\')))\n         \n    for fq in _get_each_filed_query(rq, \'5\'):\n        _add_to_values(title, _get_each_subfield_data(fq.get_subfield(\'a\')));\n        _add_to_values(title, _get_each_subfield_data(fq.get_subfield(\'h\')));\n        _add_to_values(title, _get_each_subfield_data(fq.get_subfield(\'i\')));\n\n    return \' \'.join(title)\n\n\ndef title_series(rq):\n    \n    values = []\n\n    def _title_series(fq):\n        for sfq in fq.get_subfield(\'i\').list():\n            _add_to_values(values, sfq.get_data())\n\n    for fq in rq.get_field(\'225\').list():\n        _title_series(fq)\n\n    for fq4 in _get_each_filed_query(rq, \'4\'):\n        _title_series(fq4.get_field(\'225\'))\n\n    return values\n\n\ndef title_source(rq):\n    values = []\n    for fq in _get_each_filed_query(rq, \'4\'):\n        _add_to_values(values, _extract_200_title(fq.get_field(\'200\')))\n    return values\n\n\ndef udc(rq):\n    values = []\n    for fq in rq.get_field(\'686\').list():\n        sfa = fq.get_subfield(\'a\').get_data()\n        sf2 = fq.get_subfield(\'2\').get_data()\n        if sf2 == \'udc\':\n            _add_to_values(values, sfa)\n    return values\n\n\n# local specific attrs\n\ndef attributes(rq):\n    values = []\n    for f856q in rq.get_field(\'856\').list():\n        sf_y = f856q.get_subfield(\'y\').get_data()\n        sf_z = f856q.get_subfield(\'z\').get_data()\n        if not sf_y:\n            continue\n\n        if \'Полный текст\' in sf_z:\n            values.append(\'have_ft\')\n        elif \'Содержание\' in sf_z:\n            values.append(\'have_content\')\n        elif \'Видео\' in sf_z:\n            values.append(\'have_video\')\n        elif \'Аудио\' in sf_z:\n            values.append(\'have_audio\')\n    \n    if rq.get_field(\'998\').get_subfield(\'a\').get_data() == \'РП\':\n        values.append(\'repository\')\n\n    return values\n\n\ndef catalog(rq):\n    values = []\n    for sfq in rq.get_field(\'966\').get_subfield(\'a\').list():\n        sf_d = sfq.get_data()\n        if sf_d == \'MAGR\':\n            _add_to_values(values, \'MAG_R\')\n        elif sf_d == \'MAGF\':\n            _add_to_values(values, \'MAG_F\')\n        else:\n            _add_to_values(values, sf_d)\n\n    return values\n\n\ndef collection(rq):\n    values = []\n    _add_to_values(values, rq.get_field(\'908\').get_subfield(\'a\').get_data())\n    return values\n\n\ndef date_time_added_to_db(rq):\n    values = []\n    _add_to_values(values, rq.get_field(\'100\').get_subfield(\'a\').get_data()[0:7])\n    return values\n\n\ndef date_time_of_income(rq):\n    values = []\n    _add_to_values(values, rq.get_field(\'801\').get_subfield(\'c\').get_data())\n    return values\n\n\ndef dfs_date_of_publication(rq):\n    values = []\n    if rq.get_field(\'966\').get_subfield(\'a\').get_data() == \'DFS\':\n        _add_to_values(values, rq.get_field(\'200\').get_subfield(\'e\').get_data())\n    return values\n\n\ndef dfs_document_type(rq):\n    values = []\n    if rq.get_field(\'966\').get_subfield(\'a\').get_data() == \'DFS\':\n        _add_to_values(values, rq.get_field(\'200\').get_subfield(\'d\').get_data())\n    return values\n\n\ndef dfs_organisation(rq):\n    values = []\n    if rq.get_field(\'966\').get_subfield(\'a\').get_data() == \'DFS\':\n        _add_to_values(values, rq.get_field(\'200\').get_subfield(\'f\').get_data())\n    return values\n\n\ndef e_version_type(rq):\n    values = []\n    for f856q in rq.get_field(\'856\').list():\n        _add_to_values(values, f856q.get_subfield(\'z\').get_data())\n    return values\n\n\ndef linked_record_number(rq):\n    values = []\n    _add_to_values(values, rq.get_field(\'461\').get_field(\'001\').get_data())\n    return values\n\n\ndef sic_collection(rq):\n    values = []\n    for f910q in rq.get_field(\'910\').list():\n        _add_to_values(values, f910q.get_subfield(\'q\').get_data())\n    return values\n\n\ndef shifr_izd(rq):\n    values = []\n    for f850q in rq.get_field(\'850\').list():\n        _add_to_values(values, f850q.get_subfield(\'c\').get_data())\n    _add_to_values(values, rq.get_field(\'903\').get_subfield(\'a\').get_data())\n    return values\n\n\nattrs = {\n    \'annotation\': annotation(rq),\n    \'author\': author(rq),\n    \'author_name_corporate\': author_name_corporate(rq),\n    \'bbk\': bbk(rq),\n    \'bib_level\': bib_level(rq),\n    \'code_language\': code_language(rq),\n    \'content_text\': content_text(rq),\n    \'content_type\': content_type(rq),\n    \'content_notes\': content_notes(rq),\n    \'date_of_publication\': date_of_publication(rq),\n    \'date_of_publication_of_original\': date_of_publication_of_original(rq),\n    \'grnti\': grnti(rq),\n    \'isbn\': isbn(rq),\n    \'issn\': issn(rq),\n    \'full_text\': full_text(rq),\n    \'local_number\': local_number(rq),\n    \'notes\': notes(rq),\n    \'material_type\': material_type(rq),\n    \'owner\': owner(rq),\n    \'parent_record_number\': parent_record_number(rq),\n    \'place_publication\': place_publication(rq),\n    \'previose_local_number\': previose_local_number(rq),\n    \'publisher\': publisher(rq),\n    \'record_type\': record_type(rq),\n    \'subject_heading\': subject_heading(rq),\n    \'subject_keywords\': subject_keywords(rq),\n    \'subject_subheading\': subject_subheading(rq),\n    \'title\': title(rq),\n    \'title_source\': title_source(rq),\n    \'udc\': udc(rq),\n    # local specific attrs\n    \'attributes\': attributes(rq),\n    \'catalog\': catalog(rq),\n    \'collection\': collection(rq),\n    \'date_time_added_to_db\': date_time_added_to_db(rq),\n    \'date_time_of_income\': date_time_of_income(rq),\n    \'dfs_date_of_publication\': dfs_date_of_publication(rq),\n    \'dfs_document_type\': dfs_document_type(rq),\n    \'dfs_organisation\': dfs_organisation(rq),\n    \'e_version_type\': e_version_type(rq),\n    \'linked_record_number\': linked_record_number(rq),\n    \'shifr_izd\': shifr_izd(rq),\n    \'sic_collection\': sic_collection(rq),\n}\n\n\nindex_document.add_field(\'annotation\', attrs[\'annotation\']).as_text()\nindex_document.add_field(\'author\', attrs[\'author\']).as_text()\nindex_document.add_field(\'author\', attrs[\'author\']).as_string()\nindex_document.add_field(\'author\', attrs[\'author\']).as_string().sortable()\nindex_document.add_field(\'author_name_corporate\', attrs[\'author_name_corporate\']).as_text()\nindex_document.add_field(\'bbk\', attrs[\'bbk\']).as_string()\nindex_document.add_field(\'bib_level\', attrs[\'bib_level\']).as_string()\nindex_document.add_field(\'code_language\', attrs[\'code_language\']).as_string()\nindex_document.add_field(\'content_notes\', attrs[\'content_notes\']).as_text()\nindex_document.add_field(\'content_text\', attrs[\'content_text\']).as_text(\'ru\')\nindex_document.add_field(\'date_of_publication\', attrs[\'date_of_publication\']).as_string()\nindex_document.add_field(\'date_of_publication\', attrs[\'date_of_publication\']).as_datetime()\nindex_document.add_field(\'date_of_publication\', attrs[\'date_of_publication\']).as_integer()\nindex_document.add_field(\'date_of_publication_of_original\', attrs[\'date_of_publication_of_original\']).as_string()\nindex_document.add_field(\'grnti\', attrs[\'grnti\']).as_string()\nindex_document.add_field(\'isbn\', attrs[\'isbn\']).as_string()\nindex_document.add_field(\'issn\', attrs[\'issn\']).as_string()\nindex_document.add_field(\'full_text\', attrs[\'full_text\']).as_text(\'ru\')\nindex_document.add_field(\'local_number\', attrs[\'local_number\']).as_string()\nindex_document.add_field(\'notes\', attrs[\'notes\']).as_text()\nindex_document.add_field(\'material_type\', attrs[\'material_type\']).as_string()\nindex_document.add_field(\'owner\', attrs[\'owner\']).as_string()\nindex_document.add_field(\'parent_record_number\', attrs[\'parent_record_number\']).as_string()\nindex_document.add_field(\'place_publication\', attrs[\'place_publication\']).as_text()\nindex_document.add_field(\'previose_local_number\', attrs[\'previose_local_number\']).as_string()\nindex_document.add_field(\'publisher\', attrs[\'publisher\']).as_text()\nindex_document.add_field(\'record_type\', attrs[\'record_type\']).as_string()\nindex_document.add_field(\'subject_heading\', attrs[\'subject_heading\']).as_text()\nindex_document.add_field(\'subject_keywords\', attrs[\'subject_keywords\']).as_text()\nindex_document.add_field(\'subject_subheading\', attrs[\'subject_subheading\']).as_text()\nindex_document.add_field(\'title\', attrs[\'title\']).as_text()\nindex_document.add_field(\'title\', attrs[\'title\']).as_string().sortable()\nindex_document.add_field(\'title_source\', attrs[\'title_source\']).as_text()\nindex_document.add_field(\'udc\', attrs[\'udc\']).as_string()\n\n# local specific attrs\nindex_document.add_field(\'attributes\', attrs[\'attributes\']).as_string()\nindex_document.add_field(\'catalog\', attrs[\'catalog\']).as_string()\nindex_document.add_field(\'collection\', attrs[\'collection\']).as_string()\nindex_document.add_field(\'date_time_added_to_db\', attrs[\'date_time_added_to_db\']).as_datetime()\nindex_document.add_field(\'date_time_added_to_db\', attrs[\'date_time_added_to_db\']).as_datetime().sortable()\nindex_document.add_field(\'date_time_of_income\', attrs[\'date_time_of_income\']).as_string()\nindex_document.add_field(\'date_time_of_income\', attrs[\'date_time_of_income\']).as_datetime()\nindex_document.add_field(\'date_time_of_income\', attrs[\'date_time_of_income\']).as_datetime().sortable()\nindex_document.add_field(\'dfs_date_of_publication\', attrs[\'dfs_date_of_publication\']).as_string()\nindex_document.add_field(\'dfs_date_of_publication\', attrs[\'dfs_date_of_publication\']).as_integer()\nindex_document.add_field(\'dfs_date_of_publication\', attrs[\'dfs_date_of_publication\']).as_datetime().sortable()\nindex_document.add_field(\'dfs_document_type\', attrs[\'dfs_document_type\']).as_string()\nindex_document.add_field(\'dfs_organisation\', attrs[\'dfs_organisation\']).as_string()\nindex_document.add_field(\'e_version_type\', attrs[\'e_version_type\']).as_string()\nindex_document.add_field(\'linked_record_number\', attrs[\'linked_record_number\']).as_string()\nindex_document.add_field(\'shifr_izd\', attrs[\'shifr_izd\']).as_string()\nindex_document.add_field(\'sic_collection\', attrs[\'sic_collection\']).as_string()\nindex_document.add_field(\'subject_heading\', attrs[\'subject_heading\']).as_string()\nindex_document.add_field(\'subject_keywords\', attrs[\'subject_keywords\']).as_string()\n\nall_t = [\n    attrs[\'title\'], \n    attrs[\'title_source\'],\n    attrs[\'author\'],\n    attrs[\'subject_heading\'],\n    attrs[\'subject_keywords\'],\n    attrs[\'isbn\'],\n    attrs[\'issn\'],\n    attrs[\'date_of_publication\'],\n    attrs[\'dfs_date_of_publication\'],\n]\n\nindex_document.add_field(\'all\', all_t).as_text()\nindex_document.add_field(\'all\', all_t).as_text(\'ru\')\n', help_text='На языке Python', max_length=102400, verbose_name='Код транформации')),
                ('params', models.TextField(blank=True, help_text='В формате JSON', max_length=10240, verbose_name='Параметры')),
            ],
            options={
                'verbose_name': 'Правило преобразования',
                'verbose_name_plural': 'Правила преобразования',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('original_id', models.TextField(blank=True, max_length=2048)),
                ('hash', models.CharField(max_length=32)),
                ('schema', models.CharField(max_length=32)),
                ('session_id', models.BigIntegerField(default=0)),
                ('create_date', models.DateTimeField(db_index=True)),
                ('update_date', models.DateTimeField(db_index=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'verbose_name': 'Запись',
                'verbose_name_plural': 'Записи',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Допустимы символы a-z 0-1 ".". Точка задает иерархию источника', max_length=32, unique=True, validators=[django.core.validators.RegexValidator(regex='^[0-9a-z\\.]+$')], verbose_name='Код')),
                ('active', models.BooleanField(default=True, verbose_name='Активен')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                ('last_harvesting_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего сбора')),
                ('last_indexing_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего индексирования')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('transformation_rule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='harvester.IndexTransformationRule', verbose_name='Правило преобразования')),
            ],
            options={
                'verbose_name': 'Источник',
                'verbose_name_plural': 'Источники',
            },
        ),
        migrations.CreateModel(
            name='RecordContent',
            fields=[
                ('record', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='harvester.Record')),
                ('content', models.TextField(max_length=102400)),
            ],
            options={
                'verbose_name': 'Содержимое записи',
                'verbose_name_plural': 'Содержимое записей',
            },
        ),
        migrations.CreateModel(
            name='SourceRecordsFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_uri', models.TextField(max_length=2048)),
                ('format', models.CharField(choices=[('ISO2709', 'ISO2709')], default='ISO2709', max_length=64)),
                ('schema', models.CharField(choices=[('RUSMARC', 'RUSMARC')], default='RUSMARC', max_length=64)),
                ('encoding', models.CharField(default='utf-8', max_length=64)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvester.Source')),
            ],
            options={
                'verbose_name': 'Файл источника',
                'verbose_name_plural': 'Файлы источника',
            },
        ),
        migrations.AddField(
            model_name='record',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvester.Source'),
        ),
        migrations.CreateModel(
            name='IndexingStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('indexed', models.IntegerField(default=0)),
                ('deleted', models.IntegerField(default=0)),
                ('error', models.BooleanField(default=False)),
                ('message', models.TextField(max_length=2018)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvester.Source')),
            ],
            options={
                'verbose_name': 'Статус индексирования',
                'verbose_name_plural': 'Статусы индексирования',
            },
        ),
        migrations.CreateModel(
            name='IndexingRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, verbose_name='Активен')),
                ('scheduled', models.BooleanField(default=False, verbose_name='Индексировать по расписанию')),
                ('cron_rule', models.CharField(blank=True, help_text='Пример: 0 8 * * *. Минимальный период - 1 минута', max_length=128, validators=[harvester.validators.CronValidator('Введите корректное значение расписания')], verbose_name='Расписание в формате cron')),
                ('last_indexed', models.DateTimeField(blank=True, help_text='Индексируются записи, у которых время обновления больше последнего времени индексирования. Если очистить время последнего индексирования, то будут проиндексированы все записи.', null=True, verbose_name='Время последнего индексирования')),
                ('error', models.BooleanField(default=False, verbose_name='Ошибка при индексировании')),
                ('message', models.TextField(blank=True, max_length=2048, verbose_name='Сообщение')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvester.Source')),
            ],
            options={
                'verbose_name': 'Правило индесирования',
                'verbose_name_plural': 'Правила индесирования',
            },
        ),
        migrations.CreateModel(
            name='HarvestingStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created', models.IntegerField(default=0)),
                ('updated', models.IntegerField(default=0)),
                ('deleted', models.IntegerField(default=0)),
                ('processed', models.IntegerField(default=0)),
                ('total_records', models.IntegerField(default=0)),
                ('session_id', models.IntegerField(default=0)),
                ('error', models.BooleanField(default=False)),
                ('message', models.TextField(max_length=2018)),
                ('harvesting_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvester.HarvestingRule')),
            ],
            options={
                'verbose_name': 'Статус сбора',
                'verbose_name_plural': 'Журнал сбора',
            },
        ),
        migrations.AddField(
            model_name='harvestingrule',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='harvester.Source'),
        ),
    ]
