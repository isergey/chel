# Generated by Django 3.0.4 on 2020-03-25 15:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32, unique=True, verbose_name='Район')),
            ],
            options={
                'verbose_name': 'Район',
                'verbose_name_plural': 'Районы',
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('code', models.CharField(db_index=True, max_length=32, unique=True, verbose_name='Slug')),
                ('sigla', models.CharField(blank=True, db_index=True, help_text='Сигла должна соответвовать сигле держателя, указанной в 899$a', max_length=64, null=True, verbose_name='Сигла')),
                ('main', models.BooleanField(db_index=True, default=False, null=True, verbose_name='Показывать на главной в разделе Библиотеки')),
                ('letter', models.CharField(help_text='Укажите первую букву, которой будет соответвовать фильтрация по алфавиту', max_length=1, verbose_name='Первая буква алфавита')),
                ('profile', models.TextField(blank=True, max_length=10000, verbose_name='Профиль')),
                ('phone', models.CharField(blank=True, max_length=64, verbose_name='Телефон')),
                ('plans', models.TextField(blank=True, max_length=512, verbose_name='Расписание работы')),
                ('postal_address', models.TextField(blank=True, max_length=512, verbose_name='Адрес')),
                ('http_service', models.URLField(blank=True, max_length=255, verbose_name='Адрес сайта')),
                ('z_service', models.CharField(blank=True, help_text='Укажите адрес Z сревера в формате host:port (например localhost:210)', max_length=255, verbose_name='Адрес Z сервера')),
                ('ill_service', models.EmailField(blank=True, max_length=255, verbose_name='Адрес ILL сервиса')),
                ('edd_service', models.EmailField(blank=True, max_length=255, verbose_name='Адрес ЭДД сервиса')),
                ('mail', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Адрес электронной почты')),
                ('mail_access', models.CharField(blank=True, max_length=255, verbose_name='Адрес сервера электронной почты')),
                ('latitude', models.FloatField(blank=True, db_index=True, default=0, null=True, verbose_name='Географическая широта')),
                ('longitude', models.FloatField(blank=True, db_index=True, default=0, null=True, verbose_name='Географическая долгота')),
                ('weight', models.IntegerField(db_index=True, default=100, verbose_name='Порядок вывода в списке')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='participants.District', verbose_name='Район')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='participants.Library', verbose_name='ЦБС или библиотека верхнего уровня')),
            ],
            options={
                'verbose_name': 'Библиотека',
                'verbose_name_plural': 'Библиотеки',
                'permissions': (('add_cbs', 'Can create cbs'), ('change_cbs', 'Can change cbs'), ('delete_cbs', 'Can delete cbs')),
            },
        ),
        migrations.CreateModel(
            name='LibraryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Тип библиотеки')),
            ],
        ),
        migrations.CreateModel(
            name='UserLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='participants.Library')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Пользователь МБА',
                'verbose_name_plural': 'Пользователи МБА',
            },
        ),
        migrations.AddField(
            model_name='library',
            name='types',
            field=models.ManyToManyField(blank=True, to='participants.LibraryType', verbose_name='Тип библиотеки'),
        ),
        migrations.CreateModel(
            name='LibraryContentEditor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='participants.Library')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Редактор контента ЦБС',
                'verbose_name_plural': 'Редакторы контента ЦБС',
                'unique_together': {('library', 'user')},
            },
        ),
    ]
